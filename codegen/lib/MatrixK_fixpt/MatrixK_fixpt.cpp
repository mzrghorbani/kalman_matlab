//
// Prerelease License - for engineering feedback and testing purposes
// only. Not for sale.
// File: MatrixK_fixpt.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 28-Jun-2018 14:58:39
//

// Include Files
#include "MatrixK_fixpt.h"

// Function Definitions

//
// Arguments    : const short St[8]
//                const unsigned short RmatInv[4]
//                short K[8]
// Return Type  : void
//
void MatrixK_fixpt(const short St[8], const unsigned short RmatInv[4], short K[8])
{
  int i;
  long i0;
  long i1;
  long i2;
  long i3;
  long i4;
  long i5;
  long i6;
  long i7;
  long i8;
  long i9;
  long i10;
  long i11;
  long i12;
  long i13;

  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  //                                                                           % 
  //            Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           % 
  //                                                                           % 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  for (i = 0; i < 8; i++) {
    K[i] = 0;
  }

  for (i = 0; i < 4; i++) {
    K[i] = 0;
    i0 = (long)K[i] << 10;
    i1 = St[i] * RmatInv[0];
    if ((i0 & 4294967296L) != 0L) {
      i2 = i0 | -4294967296L;
    } else {
      i2 = i0 & 4294967295L;
    }

    if ((i1 & 4294967296L) != 0L) {
      i3 = i1 | -4294967296L;
    } else {
      i3 = i1 & 4294967295L;
    }

    i0 = i2 + i3;
    if ((i0 & 4294967296L) != 0L) {
      i4 = i0 | -4294967296L;
    } else {
      i4 = i0 & 4294967295L;
    }

    K[i] = (short)(i4 >> 10);
    i0 = (long)K[i] << 10;
    i1 = St[i + 4] * RmatInv[1];
    if ((i0 & 4294967296L) != 0L) {
      i5 = i0 | -4294967296L;
    } else {
      i5 = i0 & 4294967295L;
    }

    if ((i1 & 4294967296L) != 0L) {
      i6 = i1 | -4294967296L;
    } else {
      i6 = i1 & 4294967295L;
    }

    i0 = i5 + i6;
    if ((i0 & 4294967296L) != 0L) {
      i7 = i0 | -4294967296L;
    } else {
      i7 = i0 & 4294967295L;
    }

    K[i] = (short)(i7 >> 10);
    K[i + 4] = 0;
    i0 = (long)K[i + 4] << 10;
    i1 = St[i] * RmatInv[2];
    if ((i0 & 4294967296L) != 0L) {
      i8 = i0 | -4294967296L;
    } else {
      i8 = i0 & 4294967295L;
    }

    if ((i1 & 4294967296L) != 0L) {
      i9 = i1 | -4294967296L;
    } else {
      i9 = i1 & 4294967295L;
    }

    i0 = i8 + i9;
    if ((i0 & 4294967296L) != 0L) {
      i10 = i0 | -4294967296L;
    } else {
      i10 = i0 & 4294967295L;
    }

    K[i + 4] = (short)(i10 >> 10);
    i0 = (long)K[i + 4] << 10;
    i1 = St[i + 4] * RmatInv[3];
    if ((i0 & 4294967296L) != 0L) {
      i11 = i0 | -4294967296L;
    } else {
      i11 = i0 & 4294967295L;
    }

    if ((i1 & 4294967296L) != 0L) {
      i12 = i1 | -4294967296L;
    } else {
      i12 = i1 & 4294967295L;
    }

    i0 = i11 + i12;
    if ((i0 & 4294967296L) != 0L) {
      i13 = i0 | -4294967296L;
    } else {
      i13 = i0 & 4294967295L;
    }

    K[i + 4] = (short)(i13 >> 10);
  }
}

//
// File trailer for MatrixK_fixpt.cpp
//
// [EOF]
//
