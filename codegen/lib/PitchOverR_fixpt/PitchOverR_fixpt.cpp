//
// Prerelease License - for engineering feedback and testing purposes
// only. Not for sale.
// File: PitchOverR_fixpt.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 10-Aug-2018 16:44:20
//

// Include Files
#include <cmath>
#include <string.h>
#include "rt_nonfinite.h"
#include "PitchOverR_fixpt.h"

// Function Declarations
static unsigned long _u64d_div__(unsigned long b, unsigned long c);

// Function Definitions

//
// Arguments    : unsigned long b
//                unsigned long c
// Return Type  : unsigned long
//
static unsigned long _u64d_div__(unsigned long b, unsigned long c)
{
  return b / c;
}

//
// Arguments    : unsigned short pitch
//                unsigned short r
// Return Type  : unsigned short
//
unsigned short PitchOverR_fixpt(unsigned short pitch, unsigned short r)
{
  unsigned short get[512];
  int n;
  double d0;
  unsigned long u0;
  unsigned long u1;

  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  //                                                                           % 
  //            Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           % 
  //                                                                           % 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  memset(&get[0], 0, sizeof(unsigned short) << 9);
  for (n = 0; n < 509; n++) {
    d0 = std::floor((double)((3UL + n) << 2UL));
    if (rtIsNaN(d0) || rtIsInf(d0)) {
      d0 = 0.0;
    } else {
      d0 = std::fmod(d0, 4.0);
    }

    u0 = ((unsigned char)(signed char)d0 & 3) + 2U;
    if (u0 == 0UL) {
      u1 = MAX_uint64_T;
    } else {
      u1 = _u64d_div__((unsigned long)pitch << 18, u0);
    }

    get[n + 2] = (unsigned short)((u1 & 137438953471UL) >> 14);
  }

  return (unsigned short)(get[(int)((((unsigned int)((unsigned short)(r << 2) &
    4095) >> 3) + 1U) >> 1) - 1] << 4);
}

//
// File trailer for PitchOverR_fixpt.cpp
//
// [EOF]
//
