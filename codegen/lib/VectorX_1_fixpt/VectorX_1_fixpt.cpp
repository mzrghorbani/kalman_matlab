//
// Prerelease License - for engineering feedback and testing purposes
// only. Not for sale.
// File: VectorX_1_fixpt.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 28-Jun-2018 15:04:15
//

// Include Files
#include "VectorX_1_fixpt.h"

// Function Definitions

//
// Arguments    : const short x[4]
//                const short K[8]
//                const short res[2]
//                short x_new[4]
// Return Type  : void
//
void VectorX_1_fixpt(const short x[4], const short K[8], const short res[2],
                     short x_new[4])
{
  int i0;
  long b_i0;
  long i1;
  long i2;
  long i3;
  long i4;
  long i5;
  short d0;
  int i6;
  int i7;
  int b_d0;
  int i8;

  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  //                                                                           % 
  //            Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           % 
  //                                                                           % 
  // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  for (i0 = 0; i0 < 4; i0++) {
    b_i0 = K[i0] * res[0];
    if ((b_i0 & 4294967296L) != 0L) {
      b_i0 |= -4294967296L;
    } else {
      b_i0 &= 4294967295L;
    }

    if ((b_i0 & 4294967296L) != 0L) {
      i1 = b_i0 | -4294967296L;
    } else {
      i1 = b_i0 & 4294967295L;
    }

    b_i0 = (long)(short)(i1 >> 14) << 14;
    i2 = K[i0 + 4] * res[1];
    if ((b_i0 & 4294967296L) != 0L) {
      i3 = b_i0 | -4294967296L;
    } else {
      i3 = b_i0 & 4294967295L;
    }

    if ((i2 & 4294967296L) != 0L) {
      i4 = i2 | -4294967296L;
    } else {
      i4 = i2 & 4294967295L;
    }

    b_i0 = i3 + i4;
    if ((b_i0 & 4294967296L) != 0L) {
      i5 = b_i0 | -4294967296L;
    } else {
      i5 = b_i0 & 4294967295L;
    }

    d0 = (short)(i5 >> 14);
    i6 = x[i0] << 6;
    if ((i6 & 4194304) != 0) {
      i7 = i6 | -4194304;
    } else {
      i7 = i6 & 4194303;
    }

    if ((d0 & 4194304) != 0) {
      b_d0 = d0 | -4194304;
    } else {
      b_d0 = d0 & 4194303;
    }

    i6 = i7 + b_d0;
    if ((i6 & 4194304) != 0) {
      i8 = i6 | -4194304;
    } else {
      i8 = i6 & 4194303;
    }

    x_new[i0] = (short)(i8 >> 6);
  }
}

//
// File trailer for VectorX_1_fixpt.cpp
//
// [EOF]
//
