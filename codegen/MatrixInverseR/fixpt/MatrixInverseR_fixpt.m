%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.5 and Fixed-Point Designer 6.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [RmatInv] = MatrixInverseR_fixpt(Rmat)
    fm = get_fimath();

    RmatInv = fi(zeros(4,1), 0, 16, 25, fm);
    if (abs(Rmat(2,1)) > abs(Rmat(1,1)))
        %F2F: No information found for converting the following block of code
        %F2F: Start block
        r = fi(fi_div(Rmat(1,1), Rmat(2,1)), 0, 1, 0, fm);
        t = fi(fi_div(fi(1.0, 0, 1, 0, fm), (fi_signed(r * Rmat(4,1)) - Rmat(3,1))), 0, 16, 25, fm);
        RmatInv(1,1) = fi_div(Rmat(4,1), Rmat(2,1)) * t;
        RmatInv(2,1) = fi_uminus(t);
        RmatInv(3,1) = fi_div(fi_uminus(Rmat(3,1)), Rmat(2,1)) * t;
        RmatInv(4,1) = r * t;
        %F2F: End block
    else
        r = fi(fi_div(Rmat(2,1), Rmat(1,1)), 0, 1, 0, fm);
        t = fi(fi_div(fi(1.0, 0, 1, 0, fm), (Rmat(4,1) - r * Rmat(3,1))), 0, 16, 25, fm);
        RmatInv(1,1) = fi_div(Rmat(4,1), Rmat(1,1)) * t;
        RmatInv(2,1) = fi_uminus(r) * t;
        RmatInv(3,1) = fi_div(fi_uminus(Rmat(3,1)), Rmat(1,1)) * t;
        RmatInv(4,1) = t;
    end
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_div(a,b)
    coder.inline( 'always' );
    if isfi( a ) && isfi( b ) && isscalar( b )
        a1 = fi( a, 'RoundMode', 'fix' );
        b1 = fi( b, 'RoundMode', 'fix' );
        c1 = divide( divideType( a1, b1 ), a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = a/b;
    end
end


function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_uminus(a)
    coder.inline( 'always' );
    if isfi( a )
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = -fi( a, new_nt, fimath( a ) );
    else
        y = -a;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
